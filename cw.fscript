" vi: noet
"

"The currently running cw task."
TASK := nil.

"Launches +path+ with a pipe for stdin."
task_launch := [ :path |
	|task pipe|
	task := NSTask alloc init.
	task setLaunchPath:path.
	"arguments automatically includes launchPath as $0."

	pipe := NSPipe pipe.
	task setStandardInput:pipe.
	pipe := nil.

	sys log:'about to launch task'.
	task launch.
	sys log:'did launch task'.
	^task.
].

ifTask := [ :task :trueBlock |
	|isTask|
	isTask := (task isKindOfClass:(NSTask class)).
	isTask ifTrue:trueBlock ifFalse:[ sys log:'task is not an NSTask!' ].
].

task_stdin := [ :task |
	ifTask value:task value:[
		|pipe handle|
		pipe := task standardInput.
		handle := pipe fileHandleForWriting.
	].
].

task_stop := [ :task |
	ifTask value:task value:[
		|handle|
		handle := task_stdin value:task.
		handle closeFile.
	].
].

task_write := [ :task :msg |
	ifTask value:task value:[
		|data|
		data := msg dataUsingEncoding:NSUTF8StringEncoding.
		(task_stdin value:task) writeData:data.
	].
].

"called on load and reload"
load := [ :scriptFilePath |
	|dir path|
	sys log:'Colloquy cw plugin loaded'.

	dir := scriptFilePath stringByDeletingLastPathComponent.
	path := dir stringByAppendingPathComponent:'cw/cw.rb'.
	sys log:'launching file at ' ++ path.
	TASK := task_launch value:path.
	ifTask value:task value:[ sys log:'Launched generator task ' ].
	sys log:'TESTING'.
].

"called on unload and reload"
unload := [
	task_stop value:TASK.
	sys log:'Colloquy cw plugin unloaded'.
].

"return an array of NSMenuItems that should be dispalyed for 'object' associated with 'view'"
contextualMenuItems := [ :object :view |
	{}.
].

"process the command and return true if you handle it or false to pass on to another plugin"
processUserCommand := [ :command :arguments :connection :view |
  sys log:'processUserCommand: ' ++ command ++
		' | ' ++ (arguments description) ++
		' | ' ++ (connection description) ++
		' | ' ++ (view description).
	false.
].

"perform a notification"
performNotification := [ :identifier :context :preferences |
	|msg title desc|
	title := context at:'title'.
	desc := context at:'description'.
	msg := 'vvv ' ++ title ++ ' ' ++ title ++ ' = ' ++ description ++ ' ==='.
	sys log: msg.
	write_task value:TASK value:msg.
].

"called for each incoming message, the message is mutable"
"message : JVMutableChatMessage
 view : id<JVChatViewController>
 returns void."
processIncomingMessage := [ :message :view |
	|sender body text|
	sender := message sender.
	body := message messageAsPlainText.
	text := message isAction
		ifTrue: [sender ++ ' '  ++ body]
		ifFalse:[sender ++ ': ' ++ body].
	task_write value:TASK value:text.

	sys log:'processIncomingMessage: [' ++ text ++ '] (' ++ view name ++ ')'.
].

"called when the topic changes in 'room'"
"  topic - NSMutableAttributedString"
topicChanged := [ :topic :room :user |
	sys log:'topicChanged: ' ++ (topic string) ++
		' room ' ++ (room name) ++ ' by ' ++ (user description).
	nil.
].
