" vi: noet
"

"The currently running cw task."
TASK := nil.

"Launches +path+ with a pipe for stdin."
task_launch := [ :path |
	|task pipe|
	task := NSTask alloc init autorelease.
	task setLaunchPath:path.
	"arguments automatically includes launchPath as $0."

	pipe := NSPipe pipe.
	task setStandardInput:pipe.
	pipe := nil.

	[ task launch ] onException: [:e|
		sys log:('exception launching task: ' ++ (e description))
	].
	task.
].

ifTask := [ :task :trueBlock |
	|isTask|
	isTask := (task isKindOfClass:(NSTask class)).
	isTask ifTrue:trueBlock ifFalse:[ sys log:'task is not an NSTask!' ].
].

task_stdin := [ :task |
	|handle|
	ifTask value:task value:[
		|pipe|
		sys log: 'grabbing pipe.'.
		pipe := task standardInput.
		sys log: 'got pipe'.
		handle := pipe fileHandleForWriting.
	].
	handle.
].

task_stop := [ :task |
	sys log:'in task_stop'.
	ifTask value:task value:[
		|handle|
		sys log: 'stopping task by closing stdin'.
		handle := task_stdin value:task.
		sys log: 'closing now'.
		handle ~~ nil ifTrue:[handle closeFile].
		sys log: 'did close'.
	].
].

task_write := [ :task :msg |
	ifTask value:task value:[
		|data h|
		msg := msg stringByAppendingString:'\n'.
		data := msg dataUsingEncoding:NSUTF8StringEncoding.
		h := task_stdin value:task.
		h writeData:data.
	].
].

"called on load and reload"
load := [ :scriptFilePath |
	|dir path|
	sys log:'Colloquy cw plugin loaded'.

	dir := scriptFilePath stringByDeletingLastPathComponent.
	path := dir stringByAppendingPathComponent:'cw/cw.rb'.
	TASK := task_launch value:path.
	ifTask value:TASK value:[ sys log:'Launched cw generator task'. ].
].

"called on unload and reload"
unload := [
	sys log:'unload: calling task_stop'.
	task_stop value:TASK.
	sys log:'Colloquy cw plugin unloaded'.
	nil.
].

"return an array of NSMenuItems that should be dispalyed for 'object' associated with 'view'"
contextualMenuItems := [ :object :view |
	{}.
].

"process the command and return true if you handle it or false to pass on to another plugin"
processUserCommand := [ :command :arguments :connection :view |
  sys log:'processUserCommand: ' ++ command ++
		' | ' ++ (arguments description) ++
		' | ' ++ (connection description) ++
		' | ' ++ (view description).
	false.
].

"perform a notification"
performNotification := [ :identifier :context :preferences |
	|msg title desc|
	title := (context at:'title').
	desc := (context at:'description').
	msg := 'vvv <CT> <CT> ' ++ title ++ ' = ' ++ title ++ ' = ' ++
		desc ++ ' <AR> = <AR>'.
	sys log: msg.
	write_task value:TASK value:msg.
].

"called for each incoming message, the message is mutable"
"message : JVMutableChatMessage
 view : id<JVChatViewController>
 returns void."
processIncomingMessage := [ :message :view |
	|sender body text room|
	sender := message senderNickname.
	body := message bodyAsPlainText.
	room := view target name.
	text := (message isAction)
		ifTrue:[room ++ ' DE ' ++ sender ++ ' = ' ++ sender ++ ' '  ++ body ++ ' <AR>']
		ifFalse:[room ++ ' DE ' ++ sender ++ ' = ' ++ body ++ ' <AR> K'].
	task_write value:TASK value:text.
	sys log:'processIncomingMessage: [' ++ text ++ ']'.
].

"called when the topic changes in 'room'"
"  topic - NSMutableAttributedString"
topicChanged := [ :topic :view :user |
	|room who msg|
	room := view target name.
	who := user nickname.
	msg := 'vvv ' ++ room ++ ' de ' ++ who ++
		' = QUA? QUA? = ' ++ (topic string) ++ ' <AR>'.
	task_write value:TASK value:msg.
	sys log: msg.
	nil.
].
